{"version":3,"sources":["Comps/Section/Section.jsx","Comps/FeedbackOptions/FeedbackOptions.jsx","Comps/Notification/Notification.jsx","Comps/Statistics/Statistics.jsx","App.js","index.js"],"names":["Section","title","children","FeedbackOptions","options","onLeaveFeedback","map","el","idx","type","onClick","toUpperCase","slice","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","App","useState","setGoog","setNeutral","setBad","countTotalFeedback","className","oldS","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAEe,SAASA,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,gCACE,6BAAKD,IACJC,KCJQ,SAASC,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBACjD,OAAOD,EAAQE,KAAI,SAACC,EAAGC,GAAJ,OACjB,wBAAiBC,KAAK,SAASC,QAASL,EAAgBG,GAAxD,SACGD,EAAG,GAAGI,cAAgBJ,EAAGK,MAAM,IADrBL,MCFF,SAASM,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,4BAAIA,ICDE,SAASC,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,MACAC,EACC,EADDA,mBAEA,OACE,gCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,UCRS,SAASC,IACtB,MAAwBC,mBAAS,GAAjC,mBAAON,EAAP,KAAaO,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOL,EAAP,KAAgBO,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOJ,EAAP,KAAYO,EAAZ,KAMMC,EAAqB,WACzB,OAAOV,EAAOC,EAAUC,GAQ1B,OACE,sBAAKS,UAAU,MAAf,UACE,cAAC3B,EAAD,CAASC,MAAM,wBAAf,SACE,cAACE,EAAD,CAAiBC,QAJN,CAAC,OAAQ,UAAW,OAIKC,gBAAiB,CAhB7C,kBAAMkB,GAAQ,SAAAK,GAAI,OAAIA,EAAO,MAC7B,kBAAMJ,GAAW,SAAAI,GAAI,OAAIA,EAAO,MAChC,kBAAMH,GAAO,SAAAG,GAAI,OAAIA,EAAO,WAiBtC,cAAC5B,EAAD,CAASC,MAAM,aAAf,SACGyB,IACC,cAACX,EAAD,CACEC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOO,IACPN,mBAjBDJ,EAAOa,KAAKC,MAAOd,EAAOU,IAAwB,KAAO,IAoB1D,cAACb,EAAD,CAAcC,QAAQ,2BCpChCiB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.61a5b1f5.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\n\nexport default function Section({ title, children }) {\n  return (\n    <div>\n      <h2>{title}</h2>\n      {children}\n    </div>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.any.isRequired,\n};\n","import PropTypes from \"prop-types\";\n\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\n  return options.map((el,idx) => (\n    <button key={el} type=\"button\" onClick={onLeaveFeedback[idx]}>\n      {el[0].toUpperCase() + el.slice(1)}\n    </button>\n  ));\n}\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onLeaveFeedback: PropTypes.arrayOf(PropTypes.func).isRequired,\n};\n","import PropTypes from \"prop-types\";\n\nexport default function Notification({ message }) {\n  return <p>{message}</p>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import PropTypes from \"prop-types\";\n\nexport default function Statistics({\n  good,\n  neutral,\n  bad,\n  total,\n  positivePercentage,\n}) {\n  return (\n    <div>\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total}</p>\n      <p>Positive feedback: {positivePercentage}%</p>\n    </div>\n  );\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n","import \"./App.css\";\nimport React, { useState } from \"react\";\nimport Section from \"./Comps/Section/Section\";\nimport FeedbackOptions from \"./Comps/FeedbackOptions/FeedbackOptions\";\nimport Notification from \"./Comps/Notification/Notification\";\nimport Statistics from \"./Comps/Statistics/Statistics\";\n\nexport default function App() {\n  const [good, setGoog] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const incrG = () => setGoog(oldS => oldS + 1);\n  const incrN = () => setNeutral(oldS => oldS + 1);\n  const incrB = () => setBad(oldS => oldS + 1);\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    return good ? Math.round((good / countTotalFeedback()) * 100) : 0;\n  };\n\n  const feedBack = [\"good\", \"neutral\", \"bad\"];\n  return (\n    <div className=\"App\">\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions options={feedBack} onLeaveFeedback={[incrG,incrN,incrB]} />\n      </Section>\n\n      <Section title=\"Statistics\">\n        {countTotalFeedback() ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          />\n        ) : (\n          <Notification message=\"No feedback given\"></Notification>\n        )}\n      </Section>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}